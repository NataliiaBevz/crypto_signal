from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import requests

BOT_TOKEN = "7750637434:AAFg5mKGJCCtUcrAV4vIWyKPBOykN1RdBp8"  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω

SPOT_PAIRS = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "XRPUSDT", "BNBUSDT"]

# –û—Ç—Ä–∏–º—É—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –∑ Binance
def get_binance_signal(symbol):
    url = f"https://api.binance.com/api/v3/ticker/24hr?symbol={symbol}"
    try:
        response = requests.get(url).json()
        price = float(response['lastPrice'])
        change = float(response['priceChangePercent'])
        direction = "üìà –ö—É–ø–∏—Ç–∏" if change > 0 else "üìâ –ü—Ä–æ–¥–∞—Ç–∏"
        return f"üîµ Binance {symbol}\n–¶—ñ–Ω–∞: {price:.2f}\n–ó–º—ñ–Ω–∞: {change:.2f}% ‚Üí {direction}"
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ Binance: {e}"

# –û—Ç—Ä–∏–º—É—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –∑ Bybit
def get_bybit_signal(symbol):
    url = "https://api.bybit.com/v2/public/tickers"
    try:
        response = requests.get(url).json()
        for data in response["result"]:
            if data['symbol'] == symbol:
                price = float(data['last_price'])
                change = float(data['percent_change_24h'])
                direction = "üìà –ö—É–ø–∏—Ç–∏" if change > 0 else "üìâ –ü—Ä–æ–¥–∞—Ç–∏"
                return f"üü° Bybit {symbol}\n–¶—ñ–Ω–∞: {price:.2f}\n–ó–º—ñ–Ω–∞: {change:.2f}% ‚Üí {direction}"
        return "–ú–æ–Ω–µ—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ Bybit: {e}"

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(symbol[:-4], callback_data=symbol)] for symbol in SPOT_PAIRS]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text("üí∞ –û–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É –¥–ª—è —Å–∏–≥–Ω–∞–ª—É:", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text("üí∞ –û–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É –¥–ª—è —Å–∏–≥–Ω–∞–ª—É:", reply_markup=reply_markup)


# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É –º–æ–Ω–µ—Ç–∏
async def coin_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    symbol = query.data

    keyboard = [
        [
            InlineKeyboardButton("Binance", callback_data=f"binance|{symbol}"),
            InlineKeyboardButton("Bybit", callback_data=f"bybit|{symbol}")
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"üîç –û–±—Ä–∞–Ω–∞ –º–æ–Ω–µ—Ç–∞: {symbol}\n–û–±–µ—Ä–∏ –±—ñ—Ä–∂—É:", reply_markup=reply_markup)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –±—ñ—Ä–∂—ñ
async def exchange_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    exchange, symbol = query.data.split("|")

    if exchange == "binance":
        text = get_binance_signal(symbol)
    else:
        text = get_bybit_signal(symbol)

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=symbol)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –º–æ–Ω–µ—Ç
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await start(update.callback_query, context)


if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(exchange_selected, pattern=r"^(binance|bybit)\|"))
    app.add_handler(CallbackQueryHandler(coin_selected, pattern=r"^[A-Z]+USDT$"))
    app.add_handler(CallbackQueryHandler(back_to_menu, pattern=r"^back_to_menu$"))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()
