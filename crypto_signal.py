
import os
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

SPOT_PAIRS = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "XRPUSDT", "BNBUSDT"]

COINGECKO_MAPPING = {
    "BTCUSDT": "bitcoin",
    "ETHUSDT": "ethereum",
    "SOLUSDT": "solana",
    "XRPUSDT": "ripple",
    "BNBUSDT": "binancecoin"
}

# --- –¶—ñ–Ω–∏ –∑ Binance ---
def get_binance_signal(symbol):
    url = f"https://api.binance.com/api/v3/ticker/24hr?symbol={symbol}"
    try:
        response = requests.get(url).json()
        price = float(response['lastPrice'])
        change = float(response['priceChangePercent'])
        direction = "üìà –ö—É–ø–∏—Ç–∏" if change > 0 else "üìâ –ü—Ä–æ–¥–∞—Ç–∏"
        return f"üìä Binance {symbol}\n–¶—ñ–Ω–∞: {price:.2f} USDT\n–ó–º—ñ–Ω–∞ –∑–∞ 24h: {change:.2f}% ‚Üí {direction}"
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ Binance: {e}"

# --- –¶—ñ–Ω–∏ –∑ CoinGecko ---
def get_coingecko_signal(symbol):
    coin_id = COINGECKO_MAPPING.get(symbol)
    if not coin_id:
        return f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –º–æ–Ω–µ—Ç—É {symbol} –Ω–∞ CoinGecko."

    url = f"https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies=usd&include_24hr_change=true"
    try:
        response = requests.get(url).json()
        price = response[coin_id]['usd']
        change = response[coin_id]['usd_24hr_change']
        direction = "üìà –ö—É–ø–∏—Ç–∏" if change > 0 else "üìâ –ü—Ä–æ–¥–∞—Ç–∏"
        return f"üü¢ CoinGecko {symbol}\n–¶—ñ–Ω–∞: {price:.2f} USD\n–ó–º—ñ–Ω–∞: {change:.2f}% ‚Üí {direction}"
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ CoinGecko: {e}"

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(symbol[:-4], callback_data=symbol)] for symbol in SPOT_PAIRS]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("üí∞ –û–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É –¥–ª—è —Å–∏–≥–Ω–∞–ª—É:", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text("üí∞ –û–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É –¥–ª—è —Å–∏–≥–Ω–∞–ª—É:", reply_markup=reply_markup)

# --- –û–±—Ä–æ–±–∫–∞ –º–æ–Ω–µ—Ç–∏ ---
async def coin_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    symbol = query.data

    keyboard = [
        [InlineKeyboardButton("üìä Binance", callback_data=f"binance|{symbol}")],
        [InlineKeyboardButton("üü¢ CoinGecko", callback_data=f"coingecko|{symbol}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"üîç –û–±—Ä–∞–Ω–∞ –º–æ–Ω–µ—Ç–∞: {symbol}\n–û–±–µ—Ä–∏ –¥–∂–µ—Ä–µ–ª–æ:", reply_markup=reply_markup)

# --- –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ ---
async def exchange_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    source, symbol = query.data.split("|")

    if source == "coingecko":
        text = get_coingecko_signal(symbol)
    elif source == "binance":
        text = get_binance_signal(symbol)
    else:
        text = "‚ùå –ù–µ–≤—ñ–¥–æ–º–µ –¥–∂–µ—Ä–µ–ª–æ"

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=symbol)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)

# --- –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é ---
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await start(query, context)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(exchange_selected, pattern=r"^(binance|coingecko)\|"))
    app.add_handler(CallbackQueryHandler(coin_selected, pattern=r"^[A-Z]+USDT$"))
    app.add_handler(CallbackQueryHandler(back_to_menu, pattern=r"^back_to_menu$"))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()
